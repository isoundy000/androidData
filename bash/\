#!/bin/bash
#ecoding=utf-8

import urllib2
import json

host = 'http://www.taxiaides.com/xyyc/'

class EasyCharger:
	type = {'Content-Type': 'application/json'}
	def __init__(self, output_file_name):
		self.filename = output_file_name
	# 登录
	def login(self):
		url = host + 'login'
		data = {"mobile":"admin","password":"16E740FC857D742F1705CE4C997CD5C8"}
		result = self.network(url, data)
		str_token = result["token"]
		self.type.setdefault("Token", str_token)
		return str_token


	# 所有充电站的总表
	def listAllProvinceData(self):
		url = host + 'device/selectStaion'
		data = {"currentPage":1,"itemsPerPage":10}
		reslut = self.network(url, data)
		ret = self.checkResponse(result)
		if ret == "true":
			data["itemsPerPage"] = result["total"]
			result = self.network(url, data)
			ret = self.checkResponse(result)
			if ret == "true":
				return result["rows"]
		return ret

	# 检测网络返回值
	def checkResponse(self, result):
		if result["code"] == 1:
			return "true"
		return "false"
		
	# 每个充电站的具体信息 staid充电站id count 总共的条数
	def findPortPerStation(self, staid, count):
		url = host + 'plug/selectDevice'
		data = {"currentPage":1,"itemsPerPage":count, "devtype":2, "pestaid":staid}
		result = self.network(url, data)
		ret =  self.checkResponse(result)
		if ret == "true":
			return result["rows"]
		return ret				

	#网络访问部分
	def network(self, url, data):
		jdata = json.dumps(data)
		request = urllib2.Request(url, jdata, self.type)
		response = urllib2.urlopen(request)
		return json.loads(response.read())

	#过滤每个充电站中有异常端口的数据，只返回不正常的数据
	def filiterLostStatusData(self, ports):
		lostStatusPorts = {}
		i = 0
		for port in ports:
			if port["pgstatus"] == 10:	#异常状态
				per = {"pgstatus":10, "pgnum":port["pgnum"]}
				lostStatusPorts[i] = per
				i = i + 1
		return lostStatusPorts
