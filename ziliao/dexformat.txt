dex fromat

（从头到尾）字段名称  长度（byte）    例子                     偏移（即地址）          描述            															          

模数字段magic		8	64 65 78 0A 30 33 35 00             0x0      'Magic'值，即魔数字段，格式如”dex/n035/0”，其中的035表示结构的版本		

checksum		4	dc e5 fa 12  			    0x8			校验码

签名字段，唯一性	20	0xc

file_size,dex文件大小   4       64 83 7d 00（8,225,636 字节）       0x20     前面的16进制为大端模式，地址为高伟存储低位字节码；小端模式刚好相反

head_size,文件头大小    4       70 00 00 00                         0x24	文件头长度，009版本=0x5C,035版本=0x70

endian_tag		4       78 56 34 12		            0x28    标识字节顺序的常量,根据这个常量可以判断文件是否交换了字节顺序,缺省情况下=0x78563412

link_size		4	00 00 00 00                         0x2c	连接段的大小，如果为0就表示是静态连接

link_off		4       00 00 00 00			    0x30		连接段的开始位置，从本文件头开始算起。如果连接段的大小为0，这里也是0

map_off map数据基地址	4	94 82 7d 00  		            0x34		map数据基地址,MAP_OFF制定dexmaplist的偏移

string_ids_size         4       9c 39 00 00			    0x38		字符串列表的字符串个数

string_ids_off		4	70 00 00 00			    0x3c		字符串列表字符首地址

type_ids_size           4 	d1 07 00 00			    0x40			类型列表里类型个数。

type_ids_off		4	e0 e6 00 00			    0x44		类型列表基地址。
---------------------------------------------------------------------------------------------------------------------------------
proto_ids_size		4	bd 09 00 00			    0x48		method方法 原型列表里原型个数。

proto_ids_off		4	24 06 01 00			    0x4C		method方法原型列表基地址
上面的proto指向的010624地址所代表的参数结构是method原型 -- proto_id_item，其结构原型为：
struct proto_id_item
{

	uint shorty_idx; 		//方法原型 -- 即是方法名 ---  占用4字节			

	uint return_type_idx; 		//返回值类型 0也是void类型 

	uint parameters_off;  		//type_list的偏移 -- 参数列表
					//parameters_off指向method的参数列表的类型type_list结构的表。如果parameters_off为0 则表明该函数无参数
}					//一共占12个字节
所以在010624地址处应该有12 × 09bd字节个方法原型；
struct type_list
{

	uint size;				//	参数个数

	ushort type_idx[size];  也就是书上的 type_item  //2个字节
}


---------------------------------------------------------------------------------------------------------------------------------

class_defs_size		4	0x60		类定义类表中类的个数。

class_defs_off		4	0x64		类定义列表基地址
